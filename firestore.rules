rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function signedIn() { return request.auth != null; }
    function isString(x) { return x is string && x.size() <= 5000; }

    // メンバーロール取得（存在しなければ null）
    function roleOf(orgId) {
      return request.auth != null
        ? get(/databases/$(database)/documents/organizations/$(orgId)/members/$(request.auth.uid)).data.role
        : null;
    }
    function hasAnyRole(orgId, roles) {
      return signedIn() && roles.hasAny([roleOf(orgId)]);
    }

    match /organizations/{orgId} {

      // ── 法人メタ（name）はサインイン済みなら read 可、更新は管理権限のみ
      allow read: if signedIn();
      allow update: if hasAnyRole(orgId, ['owner','admin']);
      allow create, delete: if false;

      // ── 施設（契約単位）
      match /facilities/{facilityId} {
        allow read: if signedIn();
        allow write: if hasAnyRole(orgId, ['owner','admin']);
      }

      // ── メンバー
      match /members/{uid} {
        allow read: if signedIn() && (request.auth.uid == uid || hasAnyRole(orgId, ['owner','admin']));
        allow write: if hasAnyRole(orgId, ['owner','admin']);
      }

      // ── 公開求人メタ（誰でも read）
      match /publicJobs/{pubId} {
        allow read: if true;
        allow create: if hasAnyRole(orgId, ['owner','admin','editor'])
          && request.resource.data.orgId == orgId
          && isString(request.resource.data.title)
          && isString(request.resource.data.storagePath)
          && request.resource.data.publishedAt is timestamp
          && isString(request.resource.data.publishedBy);
        allow update, delete: if false;
      }

      // ── リコログ（作成は pending 固定／承認は一方通行）
      match /licologPosts/{postId} {
        allow create: if signedIn()
          && request.resource.data.orgId == orgId
          && request.resource.data.status == 'pending';
        allow read: if signedIn();
        allow update: if hasAnyRole(orgId, ['owner','admin','editor'])
          && resource.data.orgId == orgId
          && request.resource.data.orgId == orgId
          && resource.data.status == 'pending'
          && request.resource.data.status in ['approved','hidden'];
        allow delete: if false;
      }

      // ── 承認イベント履歴（参照: editor 以上、作成: editor 以上）
      match /events/{eventId} {
        allow read: if hasAnyRole(orgId, ['owner','admin','editor']);
        allow create: if hasAnyRole(orgId, ['owner','admin','editor'])
          && request.resource.data.orgId == orgId;
        allow update, delete: if false;
      }

      // ── 応募（個人情報: admin 以上のみ参照可、作成は誰でも）
      match /applications/{appId} {
        allow create: if request.resource.data.orgId == orgId
          && isString(request.resource.data.jobPubId)
          && isString(request.resource.data.name)
          && isString(request.resource.data.contact)
          && request.resource.data.createdAt is timestamp;
        allow read: if hasAnyRole(orgId, ['owner','admin']);
        allow update, delete: if false;
      }

      // ── メトリクス（Functions が書く／管理画面からは read）
      match /metrics/{document=**} {
        allow read: if hasAnyRole(orgId, ['owner','admin','editor','staff','viewer']);
        allow write: if false;
      }
    }
  }
}